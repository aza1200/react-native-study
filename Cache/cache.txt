캐싱 캐싱 기본 개념 : 캐싱(Caching)은 애플리케이션의 처리 속도를 높여준다. 
이미 가져온 데이터나 계산된 결과값의 복사본을 저장함으로써 처리 속도를 향상시키며, 
이를 통해 향후 요청을 더 빠르게 처리할 수 있다. 
대부분의 프로그램이 동일한 데이터나 명령어에 반복해서 엑세스하기 때문에 효율적인 아키택처 패턴이다.

캐시 (cache)
리소스 파일들의 임시 저장소로, 같은 웹 페이지에 접속할 때 사용자의 PC에서 직접 로드하므로
서버를 거치지 않는다. 다시 사용될 확률이 높은 데이터들에 대해 빠르게 접근 가능한 저장소에 저장.
->페이지 로딩 속도 개선(웹 페이지 렌더링 속도 개선)/ Image, Video, Audio, CSS/JS 등 저장

캐시 히트(cache Hit) : CPU가 참조하려는 메모리가 캐시에 존재하고 있음
캐시 미스(cache Miss) : 캐시 히트와 반대로, 메모리에 캐시가 존재하지 않음

캐시 삭제 시 사용자가 수동으로 직접 삭제

https://cyberx.tistory.com/9    // About 웹 캐시

웹 캐시(Web Cache)
클라이언트가 요청하는 Image, Audio, CSS 등에 대해 첫 요청 때 파일을 미리 받아
특정 위치에 복사본을 저장하고, 이후 동일한 URL에 대한 요청 시 해당 저장된 파일을 사용하여
바로 불러오기를 한다. 서버에서 직접 내려 받는 데이터의 양을 줄이니
응답 시간과 네트워크 트레픽이 둘 다 감소되는 장점이 있다.

웹 캐시의 종류
1. Browser Cache: 브라우저 또는 HTTP 요청을 하는 Client App에 의해 내부 디스크에 캐시
   캐쉬된 리소스를 공유하지 않는 한, 클라이언트 개인에 한정된 캐시

2. Proxy Cache: Browser Cache와 동일한 원리로 동작, client나 server가 아닌 네트워크에서 동작
   큰 회사나 IPS(침입방지시스템)의 방화벽에 설치되며 대기시간 & 트래픽 감소, 접근정책&제한 우회, 사용률 기록
   한정된 수의 클라이언트를 위하여 무한대의 웹서버의 컨텐츠를 캐시

3. Gateway Cache: 서버 앞 단에 설치되어 요청에 대한 캐시 및 효율적인 분배를 통해 가용성, 성능을 향상
   무한대의 클라이언트를 위해 한정된 웹서버 컨텐츠를 캐시


첫요청
1. 브라우저는 서버에 index.html 파일을 요청합니다. 
2. 서버는 index.html파일을 찾아보고 존재 하는 파일이라면 파일 내용을 브라우저에게 몇 가지 header값과 함께 응답합니다.
3. 브라우저는 응답 받은 내용을 브라우저에 표시하고 응답 헤더의 내용에 따라 캐쉬 정책을 수행합니다.
   (응답 헤더에 Last-Modified, Etag, Expires, Cache-Control:max-age 항목이 존재 한다면 복사본을 생성하고 값을 저장 )

재요청
Last-Modified
1. 브라우저는 최초 응답 시 받은 Last-Modified 값을 If-Modified-Since 라는 헤더에 포함 시켜 페이지를 요청합니다.
2. 서버는 요청 파일의 수정 시간을 If-Modified-Since값과 비교하여 동일하다면 304 Not Modified로 응답하고 
   다르다면 200 OK와 함께 새로운 Last-Modified값을 응답 헤더에 전송합니다.
3. 브라우저는 응답 코드가 304인경우 캐쉬에서 페이지를 로드하고 200이라면 새로 다운받은후 Last-Modified값을 갱신합니다.
ETAG
1. 브라우저는 최초 응답 시 받은 Etag값을 If-None-Match 라는 헤더에  포함 시켜 페이지를 요청합니다.
2. 서버는 요청 파일의 Etag값을 If-None-Match값과 비교하여 동일하다면 304 Not Modified로 응답하고 다르다면 
  200 OK와 함께 새로운 Etag 값을 응답 헤더에 전송합니다..    
3. 브라우저는 응답 코드가 304인경우 캐쉬에서 페이지를 로드하고 200이라면 새로 다운받은후 Etag값을 갱신합니다.

* LAST-MODIFED(1.0) 와 ETAG(1.1)는 validation을 체크 합니다.  
이를 체크하기 위해 서버와 한번의 통신이 발생하게되며 그로 인해 요청과 응답에서 header와 cookie등에 의한 
데이터 전송(1KB)이 발생하게 됩니다.

Expires(1.0)
-브라우저는 최초 응답 시 받은 Expires 시간을 비교하여 해당 기간 내라면 서버를 거치지 않고 바로 캐시에서 로드합니다.
Cache-Control(1.1)
-브라우저는 최초 응답 시 받은 Cache-Control 중 max-age값(초 단위)를 GMT와 비교하여 기간 내라면 서버를 거치지 않고 
  캐쉬에서 페이지를 로드합니다. 

우선 순위 : L-M < ETAG , Expires < C-C



























